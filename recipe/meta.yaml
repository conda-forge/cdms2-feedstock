{% set name = "cdms2" %}
{% set version = "3.1.4" %}
{% set build = 11 %}

# ensure mpi is defined (needed for conda-smithy recipe-lint)
{% set mpi = mpi or 'nompi' %}

{% if mpi == 'nompi' %}
# prioritize nompi variant
{% set build = build + 100 %}
{% endif %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/CDAT/cdms/archive/v{{ version }}.tar.gz
  sha256: 106456b6e3c0fb05f65d23c2d259a9d995d54091f75393d2c845f0462ed8dc02
  patches:
    - 0001-Fixes-issue-creating-file-on-OSX-when-compiled-with-clang-and--fstack-protector-string.patch
    - 0002-replaced-numpy.rank-with-numpy.ndim-adding-test_setd.patch

build:
  number: {{ build }}
  skip: True  # [win]

  # add build string so packages can depend on
  # mpi or nompi variants explicitly:
  # `cdms2 * mpi_mpich_*` for mpich
  # `cdms2 * mpi_*` for any mpi
  # `cdms2 * nompi_*` for no mpi

  {% if mpi != 'nompi' %}
  {% set mpi_prefix = "mpi_" + mpi %}
  {% else %}
  {% set mpi_prefix = "nompi" %}
  {% endif %}
  string: "{{ mpi_prefix }}_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ build }}"

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('fortran') }}
  host:
    - python {{ python }}
    - setuptools
    - cdat_info >=8.2
    - numpy
    - libcdms >=3.1.2
    - libdrs_f >=3.1.2
    - libdrs >=3.1.2
    - cdtime >=3.1.2
    - openblas
    - lazy-object-proxy
    - libnetcdf
    - libnetcdf * {{ mpi_prefix }}_*
    - {{ mpi }}  # [mpi != 'nompi']
    - openssh  # [mpi == 'openmpi']
    - mpi4py  # [mpi != 'nompi']
  run:
    - python {{ python }}
    - libcf
    - distarray
    - lazy-object-proxy
    - cdat_info >=8.2
    - {{ pin_compatible('numpy') }}
    - esmf * {{ mpi_prefix }}_*
    - esmpy * {{ mpi_prefix }}_*
    - six
    - libcdms >=3.1.2
    - libdrs_f >=3.1.2
    - libdrs >=3.1.2
    - cdtime >=3.1.2
    - openblas
    - libnetcdf * {{ mpi_prefix }}_*
    - {{ mpi }}  # [mpi != 'nompi']
    - mpi4py  # [mpi != 'nompi']
    - openssh  # [mpi == 'openmpi']
test:
  commands:
    - export CDAT_ANONYMOUS_LOG=false && python -c "import cdms2"
    - export CDAT_ANONYMOUS_LOG=false && python -c "import cdms2; cdms2.open('test.nc', 'w')"
    - export CDAT_ANONYMOUS_LOG=false && python -c "import cdms2; cdms2.open('test.nc')"
    - export CDAT_ANONYMOUS_LOG=false && python -c "from cdms2 import MV2"

about:
  home: http://github.com/CDAT/cdms
  license: BSD-3-Clause
  license_file: bsd-3-clause.txt
  summary: Community Data Management System
  description: |
    The Community Data Management System is an object-oriented
    data management system, specialized for organizing
    multidimensional, gridded data used in climate
    analysis and simulation.
  doc_url: https://cdms.readthedocs.io/en/latest
  dev_url: http://github.com/CDAT/cdms

extra:
  recipe-maintainers:
    - dnadeau4
    - doutriaux1
    - muryanto1
    - downiec
    - jasonb5
    - xylar
